plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    /*
    Jacoco는 테스트가 동작하고 나서 이 테스트 코드들이 애플리케이션 소스들을 얼마나 커버하고 있는지 측정

     */
    id 'jacoco'
}

group = 'com.jyujyu.springtest'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    implementation(platform("software.amazon.awssdk:bom:2.20.136"))
    implementation("commons-io:commons-io:2.13.0")
    implementation("software.amazon.awssdk:aws-core")
    implementation("software.amazon.awssdk:sdk-core")
    implementation("software.amazon.awssdk:sts")
    implementation("software.amazon.awssdk:s3")
    implementation("org.springframework.kafka:spring-kafka")

    runtimeOnly 'com.mysql:mysql-connector-j'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-core:3.+'
    testImplementation 'org.testcontainers:testcontainers:1.19.0'
    testImplementation 'com.redis.testcontainers:testcontainers-redis-junit:1.6.4'
    testImplementation 'org.testcontainers:localstack:1.19.0'
    testImplementation 'org.testcontainers:kafka:1.19.0'
    testImplementation 'org.springframework.kafka:spring-kafka-test'

    testImplementation 'com.tngtech.archunit:archunit:1.1.0'
}

jacoco {
    toolVersion = "0.8.8"
}

tasks.named('test') {
    useJUnitPlatform()

    // test 실행 시 jacocoTestReport도 실행
    jacoco {}
    finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = true

        xml.destination(file("build/jacoco/jacoco.xml"))
        html.destination(file("build/jacoco/jacocoHtml"))
    }

    finalizedBy(tasks.jacocoTestCoverageVerification)
}

// jacoco 테스트 커버리지 검증
tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                // 라인 counting
                counter = 'LINE'
                value = 'COVEREDRATIO'
                // 커버리지가 80% 이상이어야 함
                minimum = BigDecimal.valueOf(0.6)
            }

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                // 한 클래스는 100줄 이상의 소스 코드를 가질 수 없다는 의미
                maximum = BigDecimal.valueOf(100)
            }

            excludes = List.of(
                    "*.api.*",
                    "*.dto.*",
                    "*.service.*",
                    "com.jyujyu.springtest.SpringtestApplication",
                    "com.jyujyu.springtest.MyCalculatorApplication",
            )
        }
    }
}